// SETUP INSTRUCTIONS ////////////////////////////////////////////////////////////////////////////////////////////////////////////

LINUX (tested on Ubuntu)

1. Open Terminal

2. Install Node.js
    sudo apt install nodejs npm

3. Install Node Packet Manager
    sudo apt install npm

4. Navigate to the contact-app directory:

5. Install dependencies with npm: (might take a while)
    npm install

6. Build with:
    ng serve -o

// CURRENT FUNCTIONALITY /////////////////////////////////////////////////////////////////////////////////////////////////////////

    Right now, the app allows you to view your contact list, create contacts of both personal and business type, delete contacts, 
    and obtain the list as a portable xml file. When creating a contact, the fields marked with * are mandatory, and the email field
    requires a valid email address. Persistence is facilitated with using a Firebase NoSQL cloud database.
    Styling is still a work in progress but this shouldn't impact functionality. 

    Problems:
    - Due to difficulties with firebase, the delete function does not affect the database. This means that you can delete locally,
    but those changes will not persist, only contacts that are added will persist. Sounds like a trivial problem but it's not, I 
    spent a lot of time trying to make it work... firebase isn't as simple as I thought.
    - Nickname and Company fields (the BusinessContact and PersonalContact specific fields) cannot be added to the database in the
    current state. This is due to the many complications of trying to store a polymorphic array into the database, which I still 
    haven't found a perfect solution for. This means that those fields will appear blank even if you add them.

// A2 IMPLEMENTATION DETAILS ////////////////////////////////////////////////////////////////////////////////////////////////////////

Learning Outcome 1:
    - For this assignment I spent a significant amount of time refactoring my original project, which was built with pure 
    TypeScript/HTML/CSS, to an Angular web app. Angular web apps are significantly more complicated, and it took a lot of time to 
    recreate the work I had already done in A1 plus add the additional functionality for this assignment. However with this completed 
    I anticipate that the project should be more modular and scalable for future assignments. Angular web apps are built with Typescript
    and OOP design, and thus large numbers of components and their corresponding classes were designed to angular standards. There are
    some interesting class relationships involving observables and I am using interfaces for parsing json.

    - The file structure of angular projects is very busy, so most of the relevant files can be found in the src/app folder.
    In here you will find the various components used to build the GUI, as well as the list service which controls communication
    between the database and the components.

    - There are many uses of lambdas in this project. Look to list.service.ts, list.component.ts for examples.
    

User Story 1: As a user that is inexperienced with computers, I would like the app layout to be improved so that I can better navigate
                the site.

    - This wep app actually used to be a lot more difficult to use. There are still some improvements to be made, but it is a large
    improvement from the largely static html pages from before. The web app is also much more stylish and modern, with lots of colors.

User Story 2: As a user, I would like to be able to remove contacts from my contact list so that I can remove old contacts.

    - When viewing the contact list, clicking on a contact will open an expansion panel, where a delete button can be found. Delete is
    only partially functional, as deleting is not persisted, and if another contact is added the viewlist will be refreshed and 
    the deleted contact will reappear.


User Story 3: As a user, I would like the app to be more visually appealing so that I can personalize my experience.

    - There are currently several themes implemented that can be toggled with the theme button on the top-right of the toolbar.
    As of now, the themes are not yet persistent.

User Story 4: As a user, I would like to be able to obtain the list as an XML file to be able to use it in other programs.

    - See portability.

User Story 5: As a user, I would like my contact list to be persistent so that I can return to it at another time and start with the
    list I had.

    - See persistence.

Portability:

    - Click on the Export tab to get the contact list as an XML file and JSON file. Serializing a polymorphic array has its issues
    and so these exports are relatively simple and actually quite different than the objects stored in the database. I'd be interested
    to learn of the proper way to serialize polymorphic arrays in class.

Persistence:

    - While it seems trivial to make the contact list persistent, it was actually the source of TONS of work. First, my plan was to
    use locally stored JSON files to store the contact[] object, but it turns out that it is not possible to write to a local file
    from an angular project. It is designed to be used in conjunction with a server database, and so after many hours trying I switched
    my approach. 
    
    For this I chose to use google firebase, a database which has some functionality for angular interaction that I thought would make 
    it easier to use. But I had another challenge to face. Turns out storing a polymorphic array into a database is actually very 
    difficult. What I ended up doing was creating an intermediate object type called ContactParser, which held the same properties as a 
    normal contact object but in addition contained whether it was a Business or Personal Contact. The ContactParser is an interface that 
    can be found in 'src/app/contact-parser.ts'.

    This ContactParser object is then stored in the database, and when read from the database is converted back to either a BusinessContact 
    or PersonalContact and stored in the Contact[]. This all takes place in the 'list.service.ts'. All of this happens in real time
    and changes to the database are automatically sent to the contact[] using observables.

    As mentioned above, any additions to the database are persistent, but at the moment the delete functionality does not affect the database.



// A1 OOP IMPLEMENTATION DETAILS ////////////////////////////////////////////////////////////////////////////////////////////////////

Encapsulation:
    -In TypeScript, each member is public by default, and don't require public modifiers. Instance variables are marked private
        and are accessible via accessors/mutators when necessary, and otherwise hidden from client programs.

Constructors:
    - The constructor of the class Contact is used as a super constructor for subclasses BusinessContact and PersonalContact

Method Overriding:
    - The outputHTML() method found in Contact is overridden by its subclasses, which reuse the parent code using a 
        super.outputHTML() call. (e.g. BusinessContact.ts line 21)

Method Overloading:
    - I did not find a need for overloaded methods in this app as of yet.

Accessors & Mutators:
    - The use of accessors and mutators is shown in the abstract Contact class found in Contact.ts contains accessors and mutators 
        for each of its private instance variables. These accessors and mutators are inherited by the subclasses BusinessContact 
        and PersonalContact, which each have an extra accessor and mutator for their specialized instance variables.

Polymorphism:
    - The ContactManager class holds a variable storing an array of Contact objects (ContentManager.ts line 5). However, the objects
        within this array are of type BusinessContact and PersonalContact (app.ts line 18/32). These classes extend Contact, and these objects are thus 
        polymorphic and of both type Contact and BusinessContact/PersonalContact.

Abstract Methods/Classes:
    - The Contact class found in Contact.ts is abstract along with all of its methods. It exists as a super class to the BusinessContact
        and PersonalContact classes, which can be instantiated.

Interfaces:
    - I did not find a need for interfaces in this app as of yet, using abstraction for inheritance instead.

Event-Driven Programming:
    - A basic GUI has been created using HTML, CSS, and TypeScript. Event-driven functionality can be seen in app.ts, where event 
        listeners execute code when buttons are pressed on the GUI.